@provide 'mixins';

/**
 * Border Radius
 */

@defmixin borderradius(TOP_RIGHT, BOTTOM_RIGHT, BOTTOM_LEFT, TOP_LEFT) {
    -webkit-border-top-right-radius: TOP_RIGHT;
    -webkit-border-bottom-right-radius: BOTTOM_RIGHT;
    -webkit-border-bottom-left-radius: BOTTOM_LEFT;
    -webkit-border-top-left-radius: TOP_LEFT;
    -moz-border-radius-topright: TOP_RIGHT;
    -moz-border-radius-bottomright: BOTTOM_RIGHT;
    -moz-border-radius-bottomleft: BOTTOM_LEFT;
    -moz-border-radius-topleft: TOP_LEFT;
    border-top-right-radius: TOP_RIGHT;
    border-bottom-right-radius: BOTTOM_RIGHT;
    border-bottom-left-radius: BOTTOM_LEFT;
    border-top-left-radius: TOP_LEFT;
}

@defmixin rounded(SIZE) {
    -webkit-border-radius: SIZE;
    -moz-border-radius: SIZE;
    border-radius: SIZE;
}

/**
 * Box Shadow
 */

@defmixin boxshadow(HORIZONTAL, VERTICAL, BLUR, SPREAD, COLOR) {
    -webkit-box-shadow: HORIZONTAL VERTICAL BLUR SPREAD COLOR;
    -moz-box-shadow: HORIZONTAL VERTICAL BLUR SPREAD COLOR;
    box-shadow: HORIZONTAL VERTICAL BLUR SPREAD COLOR;
}

@defmixin boxshadow_inset(HORIZONTAL, VERTICAL, BLUR, SPREAD, COLOR) {
    -webkit-box-shadow: inset HORIZONTAL VERTICAL BLUR SPREAD COLOR;
    -moz-box-shadow: inset HORIZONTAL VERTICAL BLUR SPREAD COLOR;
    box-shadow: inset HORIZONTAL VERTICAL BLUR SPREAD COLOR;
}

@defmixin boxshadow_none() {
    -webkit-box-shadow: none;
    -moz-box-shadow: none;
    box-shadow: none;
}

/**
 * Box Sizing
 */

@defmixin boxsizing() {
    -ms-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

/**
 * Drop Shadow
 */

@defmixin dropshadow(HORIZONTAL, VERTICAL, BLUR, ALPHA) {
    -webkit-box-shadow: HORIZONTAL VERTICAL BLUR rgba(0, 0, 0, ALPHA);
    -moz-box-shadow: HORIZONTAL VERTICAL BLUR rgba(0, 0, 0, ALPHA);
    box-shadow: HORIZONTAL VERTICAL BLUR rgba(0, 0, 0, ALPHA);
}

/**
 * Inner Shadow
 */

@defmixin innershadow(HORIZONTAL, VERTICAL, BLUR, ALPHA) {
    -webkit-box-shadow: inset HORIZONTAL VERTICAL BLUR rgba(0, 0, 0, ALPHA);
    -moz-box-shadow: inset HORIZONTAL VERTICAL BLUR rgba(0, 0, 0, ALPHA);
    box-shadow: inset HORIZONTAL VERTICAL BLUR rgba(0, 0, 0, ALPHA);
}

/**
 * Opacity
 */

@defmixin opacity(ALPHA) {
    -moz-opacity: ALPHA;
    -khtml-opacity: ALPHA;
    -webkit-opacity: ALPHA;
    opacity: ALPHA;
}

/**
 * Transform
 */

@defmixin flip_horizontal() {
    -webkit-transform: scaleX(-1);
    -moz-transform: scaleX(-1);
    -o-transform: scaleX(-1);
    transform: scaleX(-1);
    filter: FlipH;
    -ms-filter: "FlipH";
}

@defmixin flip_vertical() {
    -webkit-transform: scaleY(-1);
    -moz-transform: scaleY(-1);
    -o-transform: scaleY(-1);
    transform: scaleY(-1);
    filter: FlipV;
    -ms-filter: "FlipV";
}

@defmixin rotate(DEGREES) {
    -webkit-transform: rotate(DEGREES);
    -moz-transform: rotate(DEGREES);
    -o-transform: rotate(DEGREES);
    -ms-transform: rotate(DEGREES);
    transform: rotate(DEGREES);
}

@defmixin rotate_180_cw() {
    -webkit-transform: rotateZ(180deg);
    transform: rotateZ(180deg);
}

@defmixin rotate_180_ccw() {
    -webkit-transform: rotateZ(-180deg);
    transform: rotateZ(-180deg);
}

@defmixin scale(RATIO_HORIZONTAL, RATIO_VERTICAL) {
    -webkit-transform: scale(RATIO_HORIZONTAL, RATIO_VERTICAL);
    -moz-transform: scale(RATIO_HORIZONTAL, RATIO_VERTICAL);
    -o-transform: scale(RATIO_HORIZONTAL, RATIO_VERTICAL);
    -ms-transform: scale(RATIO_HORIZONTAL, RATIO_VERTICAL);
    transform: scale(RATIO_HORIZONTAL, RATIO_VERTICAL);
}

@defmixin translate(HORIZONTAL, VERTICAL) {
    -webkit-transform: translate(HORIZONTAL, VERTICAL);
    -moz-transform: translate(HORIZONTAL, VERTICAL);
    -o-transform: translate(HORIZONTAL, VERTICAL);
    -ms-transform: translate(HORIZONTAL, VERTICAL);
    transform: translate(HORIZONTAL, VERTICAL);
}

/**
 * Transition
 */

@defmixin transition(PROPERTY, DURATION) {
    transition: PROPERTY DURATION;
    -webkit-transition: PROPERTY DURATION;
    -moz-transition: PROPERTY DURATION;
    -o-transition: PROPERTY DURATION;
}

@defmixin transition_effect(PROPERTY, DURATION, EFFECT) {
    transition: PROPERTY DURATION EFFECT;
    -webkit-transition: PROPERTY DURATION EFFECT;
    -moz-transition: PROPERTY DURATION EFFECT;
    -o-transition: PROPERTY DURATION EFFECT;
}

@defmixin transition_delay(PROPERTY, DURATION, EFFECT, DELAY) {
    transition: PROPERTY DURATION EFFECT DELAY;
    -webkit-transition: PROPERTY DURATION EFFECT DELAY;
    -moz-transition: PROPERTY DURATION EFFECT DELAY;
    -o-transition: PROPERTY DURATION EFFECT DELAY;
}
